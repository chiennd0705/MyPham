using Common.util;
using System;
using System.Collections.Generic;
using System.Linq;
using System.ServiceModel;
using System.Web;
using System.Web.Mvc;
using Business.ClassBusiness;
using MvcPaging;

namespace BuyGroup365.Areas.Manage.Controllers
{
    public class OrderController : Controller
    {
        readonly OrdersBusiness _orderBussiness = new OrdersBusiness();
        readonly OrderBuyerBusiness _orderBuyerBusiness = new OrderBuyerBusiness();
        readonly OrderReciverBusiness _orderReciverBusiness = new OrderReciverBusiness();
        readonly OrderDetailBusiness _orderDetailBusiness = new OrderDetailBusiness();
        //
        // GET: /Manage/Order/
        #region ORDER
        public ActionResult Index(string key, int? page)
        {
            try
            {
                // init cho dropdownlist trạng thái đơn hàng
                ViewBag.statusOrder = InitSelectListItemStatusOrder();

                ViewData["status"] = true;
                ViewData["key"] = key;


                int currentPageIndex = page.HasValue ? page.Value : 1;

                var list = _orderBussiness.GetByKey(key).ToPagedList(currentPageIndex, 20);

                return View(list);
            }
            catch (FaultException ex)
            {
                var exep = Function.GetExeption(ex);
                var codeExp = exep[1];
                string url = "Error/ErrorFunction/" + codeExp;
                return RedirectToActionPermanent(url);
            }

        }    

        public ActionResult Delete(long id = 0)
        {
            try
            {
                if (id > 0)
                {
                    _orderBussiness.Remove(id);

                }
                return RedirectToAction("Index");
            }
            catch (FaultException ex)
            {
                var exep = Function.GetExeption(ex);
                var codeExp = exep[1];
                string url = "Error/ErrorFunction/" + codeExp;
                return RedirectToActionPermanent(url);
            }

        }

        public List<SelectListItem> InitSelectListItemStatusOrder()
        {
            var listItemStatus = new List<SelectListItem>();
            listItemStatus.Add(new SelectListItem { Text = "--Chọn trạng thái--", Value = "-1" });
            listItemStatus.Add(new SelectListItem { Text = "Chưa hoàn thành", Value = "0" });
            listItemStatus.Add(new SelectListItem { Text = "Đã thanh toán", Value = "1" });
            listItemStatus.Add(new SelectListItem { Text = "Chưa nhận hàng", Value = "2" });
            listItemStatus.Add(new SelectListItem { Text = "Đã nhận hàng", Value = "3" });
            listItemStatus.Add(new SelectListItem { Text = "Đã xóa", Value = "4" });

            return listItemStatus;
        }

       
        #endregion
        #region BUYER
        public ActionResult Buyer(string key, int? page)
        {
            try
            {
                ViewData["status"] = true;
                ViewData["key"] = key;
                int currentPageIndex = page.HasValue ? page.Value : 1;

                var list = _orderBuyerBusiness.GetByKey(key).ToPagedList(currentPageIndex, 20);

                return View(list);
            }
            catch (FaultException ex)
            {
                var exep = Function.GetExeption(ex);
                var codeExp = exep[1];
                string url = "Error/ErrorFunction/" + codeExp;
                return RedirectToActionPermanent(url);
            }

        }

        public ActionResult DeleteBuyer(long id = 0)
        {
            try
            {
                if (id > 0)
                {
                    _orderBuyerBusiness.Remove(id);

                }
                return RedirectToAction("Buyer");
            }
            catch (FaultException ex)
            {
                var exep = Function.GetExeption(ex);
                var codeExp = exep[1];
                string url = "Error/ErrorFunction/" + codeExp;
                return RedirectToActionPermanent(url);
            }

        }
        #endregion 

        #region RECIVER
        public ActionResult Reciver(string key, int? page)
        {
            try
            {
                ViewData["status"] = true;
                ViewData["key"] = key;
                int currentPageIndex = page.HasValue ? page.Value : 1;

                var list = _orderReciverBusiness.GetByKey(key).ToPagedList(currentPageIndex, 20);

                return View(list);
            }
            catch (FaultException ex)
            {
                var exep = Function.GetExeption(ex);
                var codeExp = exep[1];
                string url = "Error/ErrorFunction/" + codeExp;
                return RedirectToActionPermanent(url);
            }

        }
        public ActionResult DeleteReciver(long id = 0)
        {
            try
            {
                if (id > 0)
                {
                    _orderReciverBusiness.Remove(id);

                }
                return RedirectToAction("Reciver");
            }
            catch (FaultException ex)
            {
                var exep = Function.GetExeption(ex);
                var codeExp = exep[1];
                string url = "Error/ErrorFunction/" + codeExp;
                return RedirectToActionPermanent(url);
            }

        }
        #endregion 

        #region ORDER DETAIL
        public ActionResult Detail(string key, int? page)
        {
            try
            {
                ViewData["status"] = true;
                ViewData["key"] = key;
                int currentPageIndex = page.HasValue ? page.Value : 1;

                var list = _orderDetailBusiness.GetByKey(key).ToPagedList(currentPageIndex, 20);

                return View(list);
            }
            catch (FaultException ex)
            {
                var exep = Function.GetExeption(ex);
                var codeExp = exep[1];
                string url = "Error/ErrorFunction/" + codeExp;
                return RedirectToActionPermanent(url);
            }
        }
        #endregion 
      
    }
}