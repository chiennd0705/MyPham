//using BuySellGoods.Common;
//using BuySellGoods.Models;
//using FakeModelDB.DaoModel;
//using FakeModelDB.EF;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;
using System.Web.Routing;
using System.Web.Script.Serialization;
using Business.ClassBusiness;
using BuyGroup365.Models.Member;
using Common;
using Common.util;
using Newtonsoft.Json;

namespace BuyGroup365.Controllers
{
    public class PayGoodsController : Controller
    {
        OrdersBusiness ordersBusiness=new OrdersBusiness();
        OrderDetailBusiness orderDetailBusiness=new OrderDetailBusiness();
        OrderBuyerBusiness orderBuyerBusiness=new OrderBuyerBusiness();
        OrderReciverBusiness orderReciverBusiness=new OrderReciverBusiness();
        //protected override void Initialize(RequestContext rc)
        //{
        //    base.Initialize(rc);

        //    if (!SessionUtility.CheckLoginMember(Session))
        //    {
        //        Response.Redirect("/Login/Login?returnUrl=" + rc.HttpContext.Request.Url.PathAndQuery);
        //    }
        //}
        private const string CartSession = "CartSession";
        //
        // GET: /PayGoods/

        private List<CartItem> cart = new List<CartItem>();
       
        [HttpGet]
        public ActionResult Payment()
        {
            LoadDropdown loadDropdown=new LoadDropdown();
            ViewBag.Location = loadDropdown.SearchLocationParenId(1);
            if (Session != null)
            {
                var entity = NlCheckout.GetSessionCard(Session);

                if (entity == null) return RedirectToRoute(new { controller = "Login", action = "Login" });
              //  Member obj = _membersBusiness.GetById(entity.Id);
                return View(entity);
            }
            return RedirectToRoute(new { controller = "Login", action = "Login" });
            //var cart = Session[CartSession];
            //fake data for Session

            //cart = FakeModelCartItem();
            //var list = new List<CartItem>();
            //if (cart != null)
            //{
            //    list = (List<CartItem>)cart;
            //}
            
            //return View(list);
        }
        [HttpPost]
        public ActionResult Payment(double kmRoad, double gramGoods, double totalMoneyPay,double feeTranspotGood, string nameOfBuyer, string buyerPhone, string buyerEmail, string buyerAddress, string receiverName, string receiverPhone, string receiverEmail, string receiverAddress, long formPayGood)
        {
            if (ModelState.IsValid)
            {              
                //var idShop = FakeModelCartItem().First().Product.IdShop;
                //Member entity = SessionUtility.GetSessionMember(Session);
                List<long> listShop=new List<long>();
                var listoder = NlCheckout.GetSessionCard(Session);
                foreach (var cartItem in listoder)
                {
                    var id = cartItem.Product.MemberId;
                    if (listShop.Exists(x => x.Equals(id)))
                    {
                    }
                    else
                    {
                        listShop.Add(id);
                    }
                }
                foreach (var idshop in listShop)
                {
                    var order = new Order();
                    order.FeeOfTranspot = 0;
                    order.GramGood = 0;
                    order.KmRoad = kmRoad;
                    order.TotalMoney = 0;
                    order.IdPayForm = formPayGood;
                    order.IdShop = idshop;
                    ordersBusiness.AddNew(order);

                    if (formPayGood == 0)
                    {
                        //thanh toan qua ngan luong
                        string return_url = "http://demo.nganluong.vn";// Địa chỉ trả về 
                        string transaction_info = "Hãy lập trình thông tin của giao dịch của bạn vào đây";//Thông tin giao dịch
                        string order_code = order.Id.ToString();//Mã giỏ hàng 
                        string receiver = "ngodangkhoa.04@gmail.com";//Tài khoản nhận tiền 
                        string price = totalMoneyPay.ToString();//Lấy giá của giỏ hàng
                        BuyGroup365.Models.Member.NlCheckout nl = new BuyGroup365.Models.Member.NlCheckout();
                        string url;
                        url = nl.buildCheckoutUrl(idshop, return_url, receiver, transaction_info, order_code, price);
                        //ImageButton imgBtn = new ImageButton();
                        //imgBtn.ImageUrl = "https://www.nganluong.vn/data/images/buttons/11.gif";//source file ảnh
                        //imgBtn.PostBackUrl = url;//Gán địa chỉ url cho nút thanh toán
                        order.UrlBtnPayNL = url;
                        ordersBusiness.Edit(order);
                    }
                    else if (formPayGood == 1)
                    {
                        //thanh toan qua bao kim
                    }
                    else
                    {
                        //nguoi mua va nguoi ban tu thuong luong gia ca
                    }
                    //Order detail
                    //var listItem = (List<CartItem>)Session[CartSession];
                    var sesion = NlCheckout.GetSessionCard(Session);
                    Member entity = SessionUtility.GetSessionMember(Session);
                    LocationsBusiness locationsBusiness=new LocationsBusiness();
                    double moneytransport = 0;
                    double totalmoney = 0;
                    double totalGram = 0;
                    foreach (var item in sesion)
                    {
                        if (item.Product.MemberId == idshop)
                        {
                            var orderDetail = new OrderDetail();
                            orderDetail.IdOrder = order.Id;
                            orderDetail.IdProduct = item.Product.Id;

                            orderDetail.Price = (decimal)item.Product.Price;
                            moneytransport += FuntionMember.CountMoneyTransport(kmRoad, item.Product.Weight, "HN");
                            totalGram += item.Product.Weight;
                            totalmoney +=item.Product.Price + moneytransport;
                            orderDetail.NameProduct = item.Product.ProductName;
                            orderDetail.PathImage = item.Product.ProductImages.First(x => x.IsAvatar == 1).ImgSource;
                            orderDetail.Quantity = item.Quantity;

                            //    var orderDetailDao = new OrderDetailDao();
                            orderDetailBusiness.AddNew(orderDetail);
                        }
                  

                    }
                    order.TotalMoney = totalmoney;
                    order.FeeOfTranspot = totalMoneyPay;
                    order.GramGood = totalGram;
                    ordersBusiness.Edit(order);
                    //Buyer
                    Member member = SessionUtility.GetSessionMember(Session);
                    var buyer = new OrderBuyer();
                    buyer.Id = order.Id;
                    buyer.Name = nameOfBuyer;
                    buyer.PhoneNumber = buyerPhone;
                    buyer.Email = buyerEmail;
                    buyer.Address = buyerAddress;
                    buyer.CreateDate = DateTime.Now;
                    if (member != null)
                    {
                        buyer.IdMember = member.Id;// người đăng nhập mua hàng
                    }

                    //var buyerDao = new BuyerDao();
                    //buyerDao.Insert(buyer);
                    orderBuyerBusiness.AddNew(buyer);
                    //Reciver
                    var reciver = new OrderReciver();
                    reciver.Id = order.Id;
                    reciver.Name = receiverName;
                    reciver.PhoneNumber = receiverPhone;
                    reciver.Email = receiverEmail;
                    reciver.Address = receiverAddress;
                    reciver.CreateDate = DateTime.Now;
                    //var reciverDao = new ReciverDao();
                    //reciverDao.Insert(reciver);
                    orderReciverBusiness.AddNew(reciver);
                }
              //  var idShop = entity.Id;
                //Order
          
              NlCheckout.SetSessionCard(null,Session);
                return Json(null);
            }
            return null;
        }

        public ActionResult CheckPayGoods()
        {              
            bool check;
            //var idShop = FakeModelCartItem().First().Product.IdShop;
         //   Member entity = SessionUtility.GetSessionMember(Session);
            var listoder = NlCheckout.GetSessionCard(Session);
            var idShop = listoder.First().Product.MemberId;

            string transaction_info = Request.QueryString["transaction_info"];
            string order_code = Request.QueryString["order_code"];
            string payment_id = Request.QueryString["payment_id"];
            string payment_type = Request.QueryString["payment_type"];
            string secure_code = Request.QueryString["secure_code"];
            string price = Request.QueryString["price"];
            string error_text = Request.QueryString["error_text"];
            BuyGroup365.Models.Member.NlCheckout nl = new BuyGroup365.Models.Member.NlCheckout();
            check = nl.verifyPaymentUrl(idShop,transaction_info, order_code, price, payment_id, payment_type, error_text, secure_code);
            // (String transaction_info, String order_code, String price, String payment_id, String payment_type, String error_text, String secure_code)
            if (check)
            {
                ViewBag.Check = "Quá trình thanh toán thành công chúng tôi sẽ chuyển hàng sớm cho bạn";
            }
            else
                ViewBag.Check = "Quá trình thanh toán thất bại bạn vui lòng thử lại";

            return View();
        }

        public JsonResult Update(string cartModel)
        {
            ProductsBusiness productsBusiness=new ProductsBusiness();
            var serializerSettings = new JsonSerializerSettings
            {
                PreserveReferencesHandling = PreserveReferencesHandling.Objects
            };

            var jsonCart = JsonConvert.DeserializeObject<List<CartItem>>(cartModel, serializerSettings);
         //   var sesion = NlCheckout.GetSessionCard(Session);
            List<CartItem> listCartItems=new List<CartItem>();
            foreach (var cartItem in jsonCart)
            {
                CartItem entity=new CartItem();
                entity.Quantity = cartItem.Quantity;
                entity.Product = productsBusiness.GetById(cartItem.Product.Id);
                listCartItems.Add(entity);
            }
          //  var sessionCart = (List<CartItem>)Session[CartSession];
            NlCheckout.SetSessionCard(listCartItems, Session);
            //foreach (var item in sessionCart)
            //{
            //    var jsonItem = jsonCart.SingleOrDefault(x => x.Product.Id == item.Product.Id);
            //    if (jsonItem != null)
            //    {
            //        item.Quantity = jsonItem.Quantity;
            //    }
            //}
            //Session[CartSession] = sessionCart;
 
            return Json(new
            {
                status = true
            });
        }

        public JsonResult DeleteAll()
        {
            Session[CartSession] = null;
            return Json(new
            {
                status = true
            });
        }

        public JsonResult Delete(long id)
        {
            var sessionCart = (List<CartItem>)Session[CartSession];
            sessionCart.RemoveAll(x => x.Product.Id == id);
            Session[CartSession] = sessionCart;
            return Json(new
            {
                status = true
            });
        }

       
	}
}